<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Home Page</title>
    <link>https://tianqizhang93.github.io/posts/</link>
    <description>Recent content in Posts on Home Page</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>ztq.</copyright>
    <lastBuildDate>Sat, 22 May 2021 22:35:37 +0800</lastBuildDate>
    
	<atom:link href="https://tianqizhang93.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>计算机入门攻略</title>
      <link>https://tianqizhang93.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/</link>
      <pubDate>Sat, 22 May 2021 22:35:37 +0800</pubDate>
      
      <guid>https://tianqizhang93.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE/</guid>
      <description>1 基础知识 基础知识部分的意义主要是：
 入门，以及后续深入挖掘某些具体发展方向时的基础 面试过程主要考察点 从事计算机工作日常也会依赖基础知识，并不是学了以后工作完全用不到（但是可能大部分时候会让人感觉日常工作没用到太多，也不用焦虑，打算深耕的话基础一定要打好，打基础可能需要很多年，大部分人都是一边工作一边强化基础知识）  1.1 概述：“算法”、“系统”和“网络” 计算机的基础知识概括来说包括三个大方向，算法&amp;amp;系统&amp;amp;网络：
 算法与数学相关性比较大，如果不从事专门的算法工作，日常工作可能用不到太多算法 系统是个比较大的范畴，系统可能有很多种，任何设想实际落地，都是搭建一套系统来实际工作；大部分时候的日常工作，都是搭建系统，以及维护已经搭建的系统 网络就是“计算机网络”，这也是一门单独的课程，也有《计算机网络》这本书，整个计算机系统是一台一台个人电脑和服务器构成的，将他们连接起来的就是“计算机网络”  1.2 算法 算法面试的时候会经常考察这一方向，主要是做题，一些小的算法题，有专门的书讲算法&amp;ndash;《算法导论》，而算法又与“数据结构”密切相关，数据结构就是一些人为设计的帮助存储数据或者处理数据的特定的计算机概念，《算法导论》中讲算法也会结合数据结构一起讲解。 大概了解了算法的概念和套路以后，如果想练手，可以在网站上做题： https://leetcode-cn.com/problemset/all/ （这个站上基本都是些算法题或者公司的面试原题）
1.3 系统 系统是个比较大的范畴，所有现在在工作的互联网服务都是系统，例如百度的搜索引擎，是个大系统： 而其中的后端系统展开来看可能又包括以下内容： 再把搜索系统展开来讲，可能就比较具体和复杂： 总而言之，系统特别复杂繁琐；一般从事系统工作，首先需要具备工程能力，就像建筑队可以将楼房盖起来，计算机从业者需要根据相关技能，例如大家都说的“程序员”，要会写程序代码，等等，来把系统做出来；建筑队盖楼之前需要图纸，计算机系统搭建也需要“架构师”，他首先了解我们需要解决一个什么样的问题，然后完成一整套系统的设计，总整体上讲清楚系统长什么样子，应该如何工作，然后程序员就按这个“图纸”开始写代码（“搬砖”），最终一步一步将整套系统做完，这里面涉及所有计算机技能。
说到写代码，一般需要学习一些编程语言，《C和指针》是一门讲C语言入门的书。另外有一个小网站“菜鸟教程”，帮助做很多计算机知识的入门，网站地址： https://www.runoob.com/ ，比如可能平时更多会听到python这个编程语言，菜鸟教程里就可以先简单入门： https://www.runoob.com/python/python-intro.html ,如果感兴趣就可以在搜索python的知识点或者书，详细看。
下面讲了几个典型的计算机系统，操作系统&amp;amp;分布式系统&amp;amp;存储系统，系统还有很多，而且其中分布式系统也仅仅是一个概念，是一种系统类型。
1.3.1 操作系统 将系统分类来讲，首先有一种系统叫做操作系统，例如平时可能比较常用到的Windows，苹果电脑的MacOS，同时还有计算机开发时经常用到的Linux等等，他们主要是将我们（计算机使用者，包括日常使用和写程序代码）与计算机硬件（CPU，内存，硬盘等）隔离，因为我们不会直接操作计算机的硬盘删除掉某个文件（文件实际存储在计算机的硬盘上），但是可以在桌面上点击某个文件，然后点击删除，就将这个文件删除了，这就是我们告诉操作系统删除某个文件，操作系统再操作计算机硬件，真正执行文件的删除操作。 《操作系统》这本书就是专门讲操作系统的书。
1.3.2 分布式系统 例如计算机发展之初，没有太多人使用，那么如果我们想提供一个服务，例如开个淘宝店卖铅笔，那么我们在自己电脑上把真个系统搭建起来，就可以等着别人来买了；但是随着使用的人越来越多，现在生意好了，可能某一秒，有几千个人都在他们的电脑上准备下单买铅笔，那么我们提供服务的就只用一台电脑，同时跟几千台电脑打交道，就忙活不过来了，此时就需要分布式系统了；我们弄100台电脑来，然后设计好我们的服务系统架构，然后把这套服务部署在100台电脑上“卖铅笔”，这样就能够搞定几千个人来买铅笔这件事了。 这是个比较糙的例子，“分布式”是一个很大的问题，有很多专门的资料讲解。
1.3.3 存储系统 我们平时打开“爱奇艺”就可以看电影或者电视剧，这些音视频平时就存储在爱奇艺公司的某些服务器上，这些服务器什么都不干就负责放着这些音视频，当有人需要搜索某个电影时，需要能够提供一个类似“目录”的东西，快速检索到用户需要的资源，然后查出来后发给用户，这套 存储-检索 系统就是一个典型的存储系统。 “存储”也是一个比较大的问题，相关的知识包括存储技术，检索技术等等。落实到具体，知识点可能会涉及到结构化存储、非结构化存储等等，其中结构化存储比较典型和成熟的系统是Mysql，有专门的书讲数据库，可以网上搜索看下数据库和存储相关的论文。
1.4 网络 网络一般就是指计算机网络，详细内容可以看《计算机网络》这本书（有点厚）。 这是个超大方向，很多人把这个方向研究通了，可以一直从事这个方向相关的实际工作。
2 面试套路 简单介绍下面试，可能会帮助到有目的去学习。 互联网公司面试一般分几轮，下面这个举例有点具体，可能问题暂时看不太懂，但是大概套路就是先考察技术，然后团队BOSS聊，然后HR聊。
 第一轮，纯技术面  出算法题，要求讲讲思路和解题法，这同时就考察了数据结构，然后还会追问一下“复杂度”（复杂度概念可以在算法书中了解到），除此之外，如果时间充裕，还会要求面试者现场写代码，把刚说的思路写成代码，并最终运行程序得到结果，这里也考察一个人写代码的能力（编码能力一般就是看对语言的理解，对计算机的理解，代码的风格，等等等等，很多能力都能得到体现） 考察一下对计算机网络的理解，比如从计算机网络的视角，说一下用户在浏览器输入www.baidu.com，是如何一步一步打开网站得到结果的 考察一下操作系统，可能会问一些很琐碎的问题，比如进程是什么？线程是什么？他们什么区别？也会有些人问些很宏观的问题，三句话说下你对操作系统的理解？ 考察一下数据库知识点，比如Mysql索引的实现？索引是越多越好吗？   第二轮，还是技术面，对上面的技术问题可能聊的更深入，另外还会深入沟通面试者曾经做过的项目，以此来考察一个人的能力 第三轮，可能团队的技术leader来面试，考察一个人的综合素质，以及很多很多其他的实际问题 第四轮，HR，聊钱，聊工作地点等等  3 实际工作 3.</description>
    </item>
    
    <item>
      <title>新盘购房攻略(to be done)</title>
      <link>https://tianqizhang93.github.io/posts/house/</link>
      <pubDate>Thu, 13 May 2021 23:42:10 +0800</pubDate>
      
      <guid>https://tianqizhang93.github.io/posts/house/</guid>
      <description>第一阶段，选房  购房时间，购房资格  如何选择中介(中介费率)or直接售楼处，如何谈价格  城市选择，市内区域选择  开发商，承建商，物业(后期物业费标准)，预售证，五证，房屋性质  楼座，楼层，户型，隔音防水材料，墙体厚度&amp;amp;承重墙分布，容积率，出房率，绿地率，公摊面积，房屋面积，套内面积，使用面积  周边：周边配套(教育/医疗/商业)  车位配比？真人车分流？电梯有-1？车库有本？地库有储物间？一层有小庭院？顶楼层高会不会更高？  二手房好卖？  第二阶段，付款  合同，税  贷款办理(所需材料？)  房本发放时间(包括与中介协商下房本后支付中介费)  契税什么时候交？  中介费交多少？供暖费怎么交？装修押金多少？  </description>
    </item>
    
    <item>
      <title>DNS,挺好,啥是DNS?</title>
      <link>https://tianqizhang93.github.io/posts/dns-bind/</link>
      <pubDate>Thu, 13 May 2021 20:53:32 +0800</pubDate>
      
      <guid>https://tianqizhang93.github.io/posts/dns-bind/</guid>
      <description>DNS，挺好，啥是DNS？ 一些概念  FQDN: Fully Qualified Domain Name，全限定域名，同时带有主机名和域名的名称（通过符号“.”），例如一个FQDN是www.baidu.com，www是主机名，baidu.com是域名。再举例，我是海淀吴彦祖，你是**吴彦祖，但是我们还知道，有个人就叫吴彦祖，这么多吴彦祖我们都没有混淆，因为名字前面加上了地域，也就是域名。从逻辑上看FQDN，就是主机名的完整表达，类似绝对路径，通过一个FQDN我们可以在全网内锁定主机位置。 cache only DNS server : 有.的zone file的DNS服务器，本身没有任何解析数据，完全靠查询来获取数据源 forwarding DNS server : 连.的zone file都没有，完全靠向上层查询获取数据；当使用forwarding功能时，即使本身有.的zone file，也不会向.查询，该DNS server还是会将查询完全委托给上层。 CIDR:Classless Inter-Domain Routing, 无类域间路由，不按固定的字节来划分网络编号，可以使用IP地址中任何相邻位的数字作为网络编号，例如某机构需要2个B类网络大小的空间，那么可以使用前15位作为网络编号，例如127.127.0.0/15  A类,B类,C类网络：A类网络以IP地址的第一个字节(前8位)作为网络编号,剩下的24位为主机;B类网络前两个字节为网络编号;C类网络前三个字节为网络编号    DNS做什么 ipv4 32bit，ipv6 128bit，即使转成10/16进制也没人记得住，但是人类的头脑善于记录名字，所以可以搞一个名字跟IP对应，名字跟IP的对应关系解析，就是DNS提供的服务。
主机名的解析有一个发展的过程。
最初没有DNS人们如何记住各个服务名字跟IP的对应关系呢？就是写在/etc/hosts文件里，自己写麻烦，那就统一写到中心，使用的时候从中心拉取。
这个中心就是internic，主机名IP对应关系修改时，注册到internic中；用户准备上网之前先去internic把最新的文件拉下来，放在自己的/etc/hosts。
这种方式问题很多：
 例如internic拉取的文件会很大，每次打开电脑先拉个100G的文件然后再开始上网，就算你磁盘扛得住，你的网络不够好也很难受（因为你不能明确说明自己上网需要的主机名，只能拉全量，互联网业务增长该文件会越来越大） 例如这种方式是静态的，需要用户主动触发更新行为（你总不能让一个人开机默认就去下载100G的文件，他不可能给你授权的）；试想一下，一个网瘾少年下午6点睡眼惺忪的起床，打开电脑先从internic下载了半个小时文件，期间去洗漱吃了早饭，然后开开心心开始打游戏，突然，游戏掉线了，上贴吧一查，大家都说快去重新拉取internic的hosts文件呀，游戏域名被友商攻击换域名了，这还好，少年骂骂咧咧下载个文件就完事了，要是贴吧都上不去就更让人懵逼了  时代的进步总是聪明人推动的。Berkeley一个同学就觉得这种方式不太行，于是他就搞出一套BIND系统提供DNS服务。
BIND，Berkeley Internet Name Domain BIND管理方式 BIND是一套阶层式的管理主机名与IP对应关系的系统。
阶层式？可以简单理解为树状结构的不同层级，下面来简单分析下阶层式。
以www.baidu.com为例，最上层根服务器，domain name是&amp;rdquo;.&amp;quot;，然后有三个hostname &amp;ldquo;net com cn&amp;rdquo;，再到第三层，hostname分别是pdd baidu tencent，此时domain name为.com. ，以此类推。。。需要注意的是，不是每一个&amp;rdquo;.&amp;ldquo;都拆分domain name&amp;amp;hostname，例如上图 video.www.baidu.com ，其中domain name为baidu.com.，hostname为video.www。按照上述方式分层，每一个服务节点（权威）只负责自己的一小撮域名，这就避免了大量数据集中的问题。
DNS阶层系统的最上方是一个&amp;rdquo;.&amp;quot;，root，是根服务器，本质上讲，这里的&amp;rdquo;.&amp;ldquo;后面其实是空标签，这是为root保留的；根服务器下一层管理的是Top Level Domains(TLD)，例如com. net. org.等等。</description>
    </item>
    
  </channel>
</rss>